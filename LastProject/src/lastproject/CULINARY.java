/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package lastproject;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
/**
 *
 * @author ZAN
 */
public class CULINARY extends javax.swing.JFrame {
    Connection conn;
    private  DefaultTableModel modela;
    private  DefaultTableModel modelb;
    private  DefaultTableModel modelc;
    private  DefaultTableModel modeld;
    /**
     * Creates new form CULINARY
     */
    public CULINARY() {
        initComponents();
        conn = Koneksi.getConnection();
        modela = new DefaultTableModel(){
                @Override
                public boolean isCellEditable(int row, int column) {
        return false;
    }
        };
        modelb = new DefaultTableModel(){
                @Override
                public boolean isCellEditable(int row, int column) {
        return false;
    }
        };
        modelc = new DefaultTableModel(){
                @Override
                public boolean isCellEditable(int row, int column) {
        return false;
    }
        };
        modeld = new DefaultTableModel(){
                @Override
                public boolean isCellEditable(int row, int column) {
        return false;
    }
        };

        
        tblMam.setModel(modela);
        modela.addColumn("URUTAN PESANAN");
        modela.addColumn("NAMA MAKANAN");
        modela.addColumn("HARGA");
        modela.addColumn("JUMLAH");
        modela.addColumn("TOTAL");
        
        tblMinum.setModel(modelb);
        modelb.addColumn("URUTAN PESANAN");
        modelb.addColumn("NAMA MINUMAN");
        modelb.addColumn("HARGA");
        modelb.addColumn("JUMLAH");
        modelb.addColumn("TOTAL");
        
        tblCuci.setModel(modelc);
        modelc.addColumn("URUTAN PESANAN");
        modelc.addColumn("NAMA PENCUCI MULUT");
        modelc.addColumn("HARGA");
        modelc.addColumn("JUMLAH");
        modelc.addColumn("TOTAL");
        
        tblData.setModel(modeld);
        modeld.addColumn("URUTAN PESANAN");
        modeld.addColumn("NAMA PESANAN");
        modeld.addColumn("HARGA");
        modeld.addColumn("JUMLAH");
        modeld.addColumn("TOTAL");
        
        loadDatamam();
        loadDataMinum();
        loadDataCuci();
        loadDataAll();
        
        this.jTabbedPane1.setEnabledAt(4, false);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        Food = new javax.swing.JPanel();
        Conf = new javax.swing.JPanel();
        Titlef = new javax.swing.JPanel();
        Title1 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        ctnbtnf = new javax.swing.JPanel();
        rbBebekh = new javax.swing.JRadioButton();
        rbAyamh = new javax.swing.JRadioButton();
        rbCumi = new javax.swing.JRadioButton();
        rbBebek = new javax.swing.JRadioButton();
        rbAyam = new javax.swing.JRadioButton();
        rbNasi = new javax.swing.JRadioButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblMam = new javax.swing.JTable();
        btnf = new javax.swing.JPanel();
        btnPesanf = new javax.swing.JButton();
        btnUbahf = new javax.swing.JButton();
        btnHapusf = new javax.swing.JButton();
        Beverages = new javax.swing.JPanel();
        Conb = new javax.swing.JPanel();
        Titleb = new javax.swing.JPanel();
        title1 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        ctnbtnb = new javax.swing.JPanel();
        rbAir = new javax.swing.JRadioButton();
        rbTeh = new javax.swing.JRadioButton();
        rbJruk = new javax.swing.JRadioButton();
        rbSogem = new javax.swing.JRadioButton();
        rbJosua = new javax.swing.JRadioButton();
        rbCendol = new javax.swing.JRadioButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        tblMinum = new javax.swing.JTable();
        btnb = new javax.swing.JPanel();
        btnPesanb = new javax.swing.JButton();
        btnUbahb = new javax.swing.JButton();
        btnHapusb = new javax.swing.JButton();
        Dessert = new javax.swing.JPanel();
        ConD = new javax.swing.JPanel();
        Titled = new javax.swing.JPanel();
        titled1 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        ctnbtnd = new javax.swing.JPanel();
        rbGetas = new javax.swing.JRadioButton();
        rbHolj = new javax.swing.JRadioButton();
        rbDuren = new javax.swing.JRadioButton();
        rbKlepon = new javax.swing.JRadioButton();
        rbKocor = new javax.swing.JRadioButton();
        rbPatt = new javax.swing.JRadioButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        tblCuci = new javax.swing.JTable();
        btnd = new javax.swing.JPanel();
        btnPesand = new javax.swing.JButton();
        btnUbahd = new javax.swing.JButton();
        btnHapusd = new javax.swing.JButton();
        Confirmation = new javax.swing.JPanel();
        Conc = new javax.swing.JPanel();
        Titlec = new javax.swing.JPanel();
        titled2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblData = new javax.swing.JTable();
        Titlec1 = new javax.swing.JPanel();
        titled3 = new javax.swing.JLabel();
        ltotal = new javax.swing.JLabel();
        lbyr = new javax.swing.JLabel();
        tfKemb = new javax.swing.JTextField();
        tfTotal = new javax.swing.JTextField();
        btnBayar = new javax.swing.JButton();
        lbyr1 = new javax.swing.JLabel();
        btnPrint = new javax.swing.JButton();
        tfByr = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        btnByr = new javax.swing.JButton();
        Invoice = new javax.swing.JPanel();
        Coni = new javax.swing.JPanel();
        Titlei = new javax.swing.JPanel();
        titled4 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        taNota = new javax.swing.JTextArea();
        btnDone = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTabbedPane1.setBackground(new java.awt.Color(255, 153, 51));
        jTabbedPane1.setTabPlacement(javax.swing.JTabbedPane.LEFT);

        Conf.setBackground(new java.awt.Color(255, 255, 255));
        Conf.setForeground(new java.awt.Color(30, 30, 30));
        Conf.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        Titlef.setBackground(new java.awt.Color(255, 153, 102));

        Title1.setFont(new java.awt.Font("Showcard Gothic", 2, 48)); // NOI18N
        Title1.setForeground(new java.awt.Color(0, 0, 0));
        Title1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Title1.setText("MAKANAN");

        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/lastproject/img/breakfast_2144687.png"))); // NOI18N

        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/lastproject/img/breakfast_2144687.png"))); // NOI18N

        javax.swing.GroupLayout TitlefLayout = new javax.swing.GroupLayout(Titlef);
        Titlef.setLayout(TitlefLayout);
        TitlefLayout.setHorizontalGroup(
            TitlefLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(TitlefLayout.createSequentialGroup()
                .addGap(138, 138, 138)
                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Title1, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(152, Short.MAX_VALUE))
        );
        TitlefLayout.setVerticalGroup(
            TitlefLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(TitlefLayout.createSequentialGroup()
                .addGroup(TitlefLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Title1, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(13, 13, 13))
        );

        Conf.add(Titlef, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, 60));

        ctnbtnf.setLayout(new java.awt.GridLayout(2, 4));

        rbBebekh.setBackground(new java.awt.Color(255, 255, 204));
        rbBebekh.setFont(new java.awt.Font("Segoe UI Black", 2, 12)); // NOI18N
        rbBebekh.setForeground(new java.awt.Color(0, 0, 0));
        rbBebekh.setText("BEBEK HITAM");
        rbBebekh.setEnabled(false);
        rbBebekh.setIcon(new javax.swing.ImageIcon(getClass().getResource("/lastproject/img/bebek blek.jpg"))); // NOI18N
        rbBebekh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbBebekhActionPerformed(evt);
            }
        });
        ctnbtnf.add(rbBebekh);

        rbAyamh.setBackground(new java.awt.Color(255, 255, 204));
        rbAyamh.setFont(new java.awt.Font("Segoe UI Black", 2, 12)); // NOI18N
        rbAyamh.setForeground(new java.awt.Color(0, 0, 0));
        rbAyamh.setText("AYAM HITAM");
        rbAyamh.setEnabled(false);
        rbAyamh.setIcon(new javax.swing.ImageIcon("A:\\.MINE\\CHAPTER 3\\Visual Programming\\TASKS\\LastProject\\src\\lastproject\\img\\yam blek.jpg")); // NOI18N
        rbAyamh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbAyamhActionPerformed(evt);
            }
        });
        ctnbtnf.add(rbAyamh);

        rbCumi.setBackground(new java.awt.Color(255, 255, 204));
        rbCumi.setFont(new java.awt.Font("Segoe UI Black", 2, 12)); // NOI18N
        rbCumi.setForeground(new java.awt.Color(0, 0, 0));
        rbCumi.setText("CUMI HITAM");
        rbCumi.setEnabled(false);
        rbCumi.setIcon(new javax.swing.ImageIcon(getClass().getResource("/lastproject/img/cumi blek.jpg"))); // NOI18N
        rbCumi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbCumiActionPerformed(evt);
            }
        });
        ctnbtnf.add(rbCumi);

        rbBebek.setBackground(new java.awt.Color(255, 255, 204));
        rbBebek.setFont(new java.awt.Font("Segoe UI Black", 2, 12)); // NOI18N
        rbBebek.setForeground(new java.awt.Color(0, 0, 0));
        rbBebek.setText("LALAPAN BEBEK");
        rbBebek.setEnabled(false);
        rbBebek.setIcon(new javax.swing.ImageIcon(getClass().getResource("/lastproject/img/bebek biasa.jpeg"))); // NOI18N
        rbBebek.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbBebekActionPerformed(evt);
            }
        });
        ctnbtnf.add(rbBebek);

        rbAyam.setBackground(new java.awt.Color(255, 255, 204));
        rbAyam.setFont(new java.awt.Font("Segoe UI Black", 2, 12)); // NOI18N
        rbAyam.setForeground(new java.awt.Color(0, 0, 0));
        rbAyam.setText("LALAPAN AYAM");
        rbAyam.setEnabled(false);
        rbAyam.setIcon(new javax.swing.ImageIcon(getClass().getResource("/lastproject/img/ayam biasa.jpeg"))); // NOI18N
        rbAyam.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbAyamActionPerformed(evt);
            }
        });
        ctnbtnf.add(rbAyam);

        rbNasi.setBackground(new java.awt.Color(255, 255, 204));
        rbNasi.setFont(new java.awt.Font("Segoe UI Black", 2, 12)); // NOI18N
        rbNasi.setForeground(new java.awt.Color(0, 0, 0));
        rbNasi.setText("NASI");
        rbNasi.setEnabled(false);
        rbNasi.setIcon(new javax.swing.ImageIcon(getClass().getResource("/lastproject/img/nasi.jpg"))); // NOI18N
        rbNasi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbNasiActionPerformed(evt);
            }
        });
        ctnbtnf.add(rbNasi);

        Conf.add(ctnbtnf, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 63, 680, 310));

        tblMam.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };
        });
        tblMam.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblMamMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(tblMam);

        Conf.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 371, 510, 280));

        btnf.setLayout(new java.awt.GridLayout(3, 0));

        btnPesanf.setBackground(new java.awt.Color(255, 255, 102));
        btnPesanf.setFont(new java.awt.Font("Segoe UI Black", 1, 18)); // NOI18N
        btnPesanf.setForeground(new java.awt.Color(0, 0, 0));
        btnPesanf.setText("PESAN");
        btnPesanf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPesanfActionPerformed(evt);
            }
        });
        btnf.add(btnPesanf);

        btnUbahf.setBackground(new java.awt.Color(255, 255, 102));
        btnUbahf.setFont(new java.awt.Font("Segoe UI Black", 1, 18)); // NOI18N
        btnUbahf.setForeground(new java.awt.Color(0, 0, 0));
        btnUbahf.setText("UBAH");
        btnUbahf.setEnabled(false);
        btnUbahf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUbahfActionPerformed(evt);
            }
        });
        btnf.add(btnUbahf);

        btnHapusf.setBackground(new java.awt.Color(255, 255, 102));
        btnHapusf.setFont(new java.awt.Font("Segoe UI Black", 1, 18)); // NOI18N
        btnHapusf.setForeground(new java.awt.Color(0, 0, 0));
        btnHapusf.setText("HAPUS");
        btnHapusf.setEnabled(false);
        btnHapusf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHapusfActionPerformed(evt);
            }
        });
        btnf.add(btnHapusf);

        Conf.add(btnf, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 370, 170, 280));

        javax.swing.GroupLayout FoodLayout = new javax.swing.GroupLayout(Food);
        Food.setLayout(FoodLayout);
        FoodLayout.setHorizontalGroup(
            FoodLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Conf, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        FoodLayout.setVerticalGroup(
            FoodLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Conf, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("MAKANAN", Food);

        Conb.setBackground(new java.awt.Color(255, 255, 255));
        Conb.setForeground(new java.awt.Color(30, 30, 30));
        Conb.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        Titleb.setBackground(new java.awt.Color(255, 153, 102));

        title1.setFont(new java.awt.Font("Showcard Gothic", 2, 36)); // NOI18N
        title1.setForeground(new java.awt.Color(0, 0, 0));
        title1.setText("MINUMAN");

        jLabel11.setIcon(new javax.swing.ImageIcon(getClass().getResource("/lastproject/img/soft-drinks_2600474.png"))); // NOI18N

        jLabel10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/lastproject/img/soft-drinks_2600474.png"))); // NOI18N
        jLabel10.setText("jLabel10");

        javax.swing.GroupLayout TitlebLayout = new javax.swing.GroupLayout(Titleb);
        Titleb.setLayout(TitlebLayout);
        TitlebLayout.setHorizontalGroup(
            TitlebLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(TitlebLayout.createSequentialGroup()
                .addGap(162, 162, 162)
                .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(title1, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(203, Short.MAX_VALUE))
        );
        TitlebLayout.setVerticalGroup(
            TitlebLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(TitlebLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(TitlebLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(TitlebLayout.createSequentialGroup()
                        .addComponent(jLabel11)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, TitlebLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(title1)))
                .addContainerGap())
        );

        Conb.add(Titleb, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, 60));

        ctnbtnb.setLayout(new java.awt.GridLayout(2, 4));

        rbAir.setBackground(new java.awt.Color(255, 255, 204));
        rbAir.setFont(new java.awt.Font("Segoe UI Black", 2, 12)); // NOI18N
        rbAir.setForeground(new java.awt.Color(0, 0, 0));
        rbAir.setText("AIR MINERAL");
        rbAir.setEnabled(false);
        rbAir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/lastproject/img/air.jpg"))); // NOI18N
        rbAir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbAirActionPerformed(evt);
            }
        });
        ctnbtnb.add(rbAir);

        rbTeh.setBackground(new java.awt.Color(255, 255, 204));
        rbTeh.setFont(new java.awt.Font("Segoe UI Black", 2, 12)); // NOI18N
        rbTeh.setForeground(new java.awt.Color(0, 0, 0));
        rbTeh.setText("TEH");
        rbTeh.setEnabled(false);
        rbTeh.setIcon(new javax.swing.ImageIcon(getClass().getResource("/lastproject/img/teh.jpeg"))); // NOI18N
        rbTeh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbTehActionPerformed(evt);
            }
        });
        ctnbtnb.add(rbTeh);

        rbJruk.setBackground(new java.awt.Color(255, 255, 204));
        rbJruk.setFont(new java.awt.Font("Segoe UI Black", 2, 12)); // NOI18N
        rbJruk.setForeground(new java.awt.Color(0, 0, 0));
        rbJruk.setText("JERUK");
        rbJruk.setEnabled(false);
        rbJruk.setIcon(new javax.swing.ImageIcon(getClass().getResource("/lastproject/img/jruk.jpg"))); // NOI18N
        rbJruk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbJrukActionPerformed(evt);
            }
        });
        ctnbtnb.add(rbJruk);

        rbSogem.setBackground(new java.awt.Color(255, 255, 204));
        rbSogem.setFont(new java.awt.Font("Segoe UI Black", 2, 12)); // NOI18N
        rbSogem.setForeground(new java.awt.Color(0, 0, 0));
        rbSogem.setText("ES SODA SENANG");
        rbSogem.setEnabled(false);
        rbSogem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/lastproject/img/sogem.jpeg"))); // NOI18N
        rbSogem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbSogemActionPerformed(evt);
            }
        });
        ctnbtnb.add(rbSogem);

        rbJosua.setBackground(new java.awt.Color(255, 255, 204));
        rbJosua.setFont(new java.awt.Font("Segoe UI Black", 2, 12)); // NOI18N
        rbJosua.setForeground(new java.awt.Color(0, 0, 0));
        rbJosua.setText("ES JOSUSU");
        rbJosua.setEnabled(false);
        rbJosua.setIcon(new javax.swing.ImageIcon(getClass().getResource("/lastproject/img/josua.jpg"))); // NOI18N
        rbJosua.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbJosuaActionPerformed(evt);
            }
        });
        ctnbtnb.add(rbJosua);

        rbCendol.setBackground(new java.awt.Color(255, 255, 204));
        rbCendol.setFont(new java.awt.Font("Segoe UI Black", 2, 12)); // NOI18N
        rbCendol.setForeground(new java.awt.Color(0, 0, 0));
        rbCendol.setText("ES CENDOEL");
        rbCendol.setEnabled(false);
        rbCendol.setIcon(new javax.swing.ImageIcon(getClass().getResource("/lastproject/img/cendol.jpg"))); // NOI18N
        rbCendol.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbCendolActionPerformed(evt);
            }
        });
        ctnbtnb.add(rbCendol);

        Conb.add(ctnbtnb, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 63, 680, 310));

        tblMinum.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblMinum.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblMinumMouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(tblMinum);

        Conb.add(jScrollPane4, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 371, 510, 280));

        btnb.setLayout(new java.awt.GridLayout(3, 0));

        btnPesanb.setBackground(new java.awt.Color(255, 255, 102));
        btnPesanb.setFont(new java.awt.Font("Segoe UI Black", 1, 18)); // NOI18N
        btnPesanb.setForeground(new java.awt.Color(0, 0, 0));
        btnPesanb.setText("PESAN");
        btnPesanb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPesanbActionPerformed(evt);
            }
        });
        btnb.add(btnPesanb);

        btnUbahb.setBackground(new java.awt.Color(255, 255, 102));
        btnUbahb.setFont(new java.awt.Font("Segoe UI Black", 1, 18)); // NOI18N
        btnUbahb.setForeground(new java.awt.Color(0, 0, 0));
        btnUbahb.setText("UBAH");
        btnUbahb.setEnabled(false);
        btnUbahb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUbahbActionPerformed(evt);
            }
        });
        btnb.add(btnUbahb);

        btnHapusb.setBackground(new java.awt.Color(255, 255, 102));
        btnHapusb.setFont(new java.awt.Font("Segoe UI Black", 1, 18)); // NOI18N
        btnHapusb.setForeground(new java.awt.Color(0, 0, 0));
        btnHapusb.setText("HAPUS");
        btnHapusb.setEnabled(false);
        btnHapusb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHapusbActionPerformed(evt);
            }
        });
        btnb.add(btnHapusb);

        Conb.add(btnb, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 370, 170, 280));

        javax.swing.GroupLayout BeveragesLayout = new javax.swing.GroupLayout(Beverages);
        Beverages.setLayout(BeveragesLayout);
        BeveragesLayout.setHorizontalGroup(
            BeveragesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Conb, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        BeveragesLayout.setVerticalGroup(
            BeveragesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Conb, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("MINUMAN", Beverages);

        ConD.setBackground(new java.awt.Color(255, 255, 255));
        ConD.setForeground(new java.awt.Color(30, 30, 30));
        ConD.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        Titled.setBackground(new java.awt.Color(255, 153, 102));

        titled1.setFont(new java.awt.Font("Showcard Gothic", 2, 36)); // NOI18N
        titled1.setForeground(new java.awt.Color(0, 0, 0));
        titled1.setText("PENCUCI MULUT");

        jLabel12.setIcon(new javax.swing.ImageIcon(getClass().getResource("/lastproject/img/pancake_3198664.png"))); // NOI18N

        jLabel7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/lastproject/img/pancake_3198664.png"))); // NOI18N

        javax.swing.GroupLayout TitledLayout = new javax.swing.GroupLayout(Titled);
        Titled.setLayout(TitledLayout);
        TitledLayout.setHorizontalGroup(
            TitledLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(TitledLayout.createSequentialGroup()
                .addGap(118, 118, 118)
                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(titled1, javax.swing.GroupLayout.PREFERRED_SIZE, 298, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(128, Short.MAX_VALUE))
        );
        TitledLayout.setVerticalGroup(
            TitledLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(TitledLayout.createSequentialGroup()
                .addGroup(TitledLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(TitledLayout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(TitledLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel12)
                            .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, TitledLayout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(titled1)))
                .addContainerGap())
        );

        ConD.add(Titled, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, 60));

        ctnbtnd.setLayout(new java.awt.GridLayout(2, 4));

        rbGetas.setBackground(new java.awt.Color(255, 255, 204));
        rbGetas.setFont(new java.awt.Font("Segoe UI Black", 2, 12)); // NOI18N
        rbGetas.setForeground(new java.awt.Color(0, 0, 0));
        rbGetas.setText("GETTAS");
        rbGetas.setEnabled(false);
        rbGetas.setIcon(new javax.swing.ImageIcon(getClass().getResource("/lastproject/img/getas.jpeg"))); // NOI18N
        rbGetas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbGetasActionPerformed(evt);
            }
        });
        ctnbtnd.add(rbGetas);

        rbHolj.setBackground(new java.awt.Color(255, 255, 204));
        rbHolj.setFont(new java.awt.Font("Segoe UI Black", 2, 12)); // NOI18N
        rbHolj.setForeground(new java.awt.Color(0, 0, 0));
        rbHolj.setText("HOLJANNAH");
        rbHolj.setEnabled(false);
        rbHolj.setIcon(new javax.swing.ImageIcon(getClass().getResource("/lastproject/img/holjannah.jpg"))); // NOI18N
        rbHolj.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbHoljActionPerformed(evt);
            }
        });
        ctnbtnd.add(rbHolj);

        rbDuren.setBackground(new java.awt.Color(255, 255, 204));
        rbDuren.setFont(new java.awt.Font("Segoe UI Black", 2, 12)); // NOI18N
        rbDuren.setForeground(new java.awt.Color(0, 0, 0));
        rbDuren.setText("SERUT DUREN");
        rbDuren.setEnabled(false);
        rbDuren.setIcon(new javax.swing.ImageIcon(getClass().getResource("/lastproject/img/es duren.jpeg"))); // NOI18N
        rbDuren.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbDurenActionPerformed(evt);
            }
        });
        ctnbtnd.add(rbDuren);

        rbKlepon.setBackground(new java.awt.Color(255, 255, 204));
        rbKlepon.setFont(new java.awt.Font("Segoe UI Black", 2, 12)); // NOI18N
        rbKlepon.setForeground(new java.awt.Color(0, 0, 0));
        rbKlepon.setText("KLEPON");
        rbKlepon.setEnabled(false);
        rbKlepon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/lastproject/img/klepon.jpg"))); // NOI18N
        rbKlepon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbKleponActionPerformed(evt);
            }
        });
        ctnbtnd.add(rbKlepon);

        rbKocor.setBackground(new java.awt.Color(255, 255, 204));
        rbKocor.setFont(new java.awt.Font("Segoe UI Black", 2, 12)); // NOI18N
        rbKocor.setForeground(new java.awt.Color(0, 0, 0));
        rbKocor.setText("KOCOR");
        rbKocor.setEnabled(false);
        rbKocor.setIcon(new javax.swing.ImageIcon(getClass().getResource("/lastproject/img/kocor.jpeg"))); // NOI18N
        rbKocor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbKocorActionPerformed(evt);
            }
        });
        ctnbtnd.add(rbKocor);

        rbPatt.setBackground(new java.awt.Color(255, 255, 204));
        rbPatt.setFont(new java.awt.Font("Segoe UI Black", 2, 12)); // NOI18N
        rbPatt.setForeground(new java.awt.Color(0, 0, 0));
        rbPatt.setText("PATTOLA");
        rbPatt.setEnabled(false);
        rbPatt.setIcon(new javax.swing.ImageIcon(getClass().getResource("/lastproject/img/pattola.jpg"))); // NOI18N
        rbPatt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbPattActionPerformed(evt);
            }
        });
        ctnbtnd.add(rbPatt);

        ConD.add(ctnbtnd, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 63, 680, 310));

        tblCuci.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblCuci.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblCuciMouseClicked(evt);
            }
        });
        jScrollPane5.setViewportView(tblCuci);

        ConD.add(jScrollPane5, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 371, 510, 280));

        btnd.setLayout(new java.awt.GridLayout(3, 0));

        btnPesand.setBackground(new java.awt.Color(255, 255, 102));
        btnPesand.setFont(new java.awt.Font("Segoe UI Black", 1, 18)); // NOI18N
        btnPesand.setForeground(new java.awt.Color(0, 0, 0));
        btnPesand.setText("PESAN");
        btnPesand.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPesandActionPerformed(evt);
            }
        });
        btnd.add(btnPesand);

        btnUbahd.setBackground(new java.awt.Color(255, 255, 102));
        btnUbahd.setFont(new java.awt.Font("Segoe UI Black", 1, 18)); // NOI18N
        btnUbahd.setForeground(new java.awt.Color(0, 0, 0));
        btnUbahd.setText("UBAH");
        btnUbahd.setEnabled(false);
        btnUbahd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUbahdActionPerformed(evt);
            }
        });
        btnd.add(btnUbahd);

        btnHapusd.setBackground(new java.awt.Color(255, 255, 102));
        btnHapusd.setFont(new java.awt.Font("Segoe UI Black", 1, 18)); // NOI18N
        btnHapusd.setForeground(new java.awt.Color(0, 0, 0));
        btnHapusd.setText("HAPUS");
        btnHapusd.setEnabled(false);
        btnHapusd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHapusdActionPerformed(evt);
            }
        });
        btnd.add(btnHapusd);

        ConD.add(btnd, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 370, 170, 280));

        javax.swing.GroupLayout DessertLayout = new javax.swing.GroupLayout(Dessert);
        Dessert.setLayout(DessertLayout);
        DessertLayout.setHorizontalGroup(
            DessertLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(ConD, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        DessertLayout.setVerticalGroup(
            DessertLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(ConD, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("PENCUCI MULUT", Dessert);

        Conc.setBackground(new java.awt.Color(255, 204, 153));
        Conc.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204), 5));
        Conc.setForeground(new java.awt.Color(30, 30, 30));

        Titlec.setBackground(new java.awt.Color(255, 153, 102));

        titled2.setFont(new java.awt.Font("Showcard Gothic", 2, 36)); // NOI18N
        titled2.setForeground(new java.awt.Color(0, 0, 0));
        titled2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        titled2.setText("Data Pemesanan");

        javax.swing.GroupLayout TitlecLayout = new javax.swing.GroupLayout(Titlec);
        Titlec.setLayout(TitlecLayout);
        TitlecLayout.setHorizontalGroup(
            TitlecLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(TitlecLayout.createSequentialGroup()
                .addGap(186, 186, 186)
                .addComponent(titled2, javax.swing.GroupLayout.PREFERRED_SIZE, 318, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        TitlecLayout.setVerticalGroup(
            TitlecLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, TitlecLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(titled2)
                .addContainerGap())
        );

        tblData.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tblData);

        Titlec1.setBackground(new java.awt.Color(255, 153, 102));
        Titlec1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204), 5));

        titled3.setFont(new java.awt.Font("Showcard Gothic", 2, 36)); // NOI18N
        titled3.setForeground(new java.awt.Color(0, 0, 0));
        titled3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        titled3.setText("Pembayaran");

        javax.swing.GroupLayout Titlec1Layout = new javax.swing.GroupLayout(Titlec1);
        Titlec1.setLayout(Titlec1Layout);
        Titlec1Layout.setHorizontalGroup(
            Titlec1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Titlec1Layout.createSequentialGroup()
                .addGap(184, 184, 184)
                .addComponent(titled3, javax.swing.GroupLayout.PREFERRED_SIZE, 298, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        Titlec1Layout.setVerticalGroup(
            Titlec1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, Titlec1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(titled3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        ltotal.setFont(new java.awt.Font("Segoe UI Black", 1, 18)); // NOI18N
        ltotal.setForeground(new java.awt.Color(0, 0, 0));
        ltotal.setText("Total                       =");

        lbyr.setFont(new java.awt.Font("Segoe UI Black", 1, 18)); // NOI18N
        lbyr.setForeground(new java.awt.Color(0, 0, 0));
        lbyr.setText("Pembayaran         =");

        tfKemb.setEditable(false);
        tfKemb.setEnabled(false);

        tfTotal.setEditable(false);
        tfTotal.setEnabled(false);
        tfTotal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfTotalActionPerformed(evt);
            }
        });

        btnBayar.setBackground(new java.awt.Color(255, 255, 102));
        btnBayar.setFont(new java.awt.Font("Segoe UI Black", 1, 24)); // NOI18N
        btnBayar.setForeground(new java.awt.Color(0, 0, 0));
        btnBayar.setText("KONFIRMASI PESANAN");
        btnBayar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBayarActionPerformed(evt);
            }
        });

        lbyr1.setFont(new java.awt.Font("Segoe UI Black", 1, 18)); // NOI18N
        lbyr1.setForeground(new java.awt.Color(0, 0, 0));
        lbyr1.setText("Kembalian    =");

        btnPrint.setBackground(new java.awt.Color(255, 255, 102));
        btnPrint.setFont(new java.awt.Font("Segoe UI Black", 1, 18)); // NOI18N
        btnPrint.setForeground(new java.awt.Color(0, 0, 0));
        btnPrint.setText("PRINT NOTA");
        btnPrint.setEnabled(false);
        btnPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrintActionPerformed(evt);
            }
        });

        tfByr.setEnabled(false);

        jPanel1.setBackground(new java.awt.Color(204, 204, 204));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 671, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 11, Short.MAX_VALUE)
        );

        btnByr.setBackground(new java.awt.Color(255, 255, 102));
        btnByr.setFont(new java.awt.Font("Segoe UI Black", 1, 18)); // NOI18N
        btnByr.setForeground(new java.awt.Color(0, 0, 0));
        btnByr.setText("BAYAR");
        btnByr.setEnabled(false);
        btnByr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnByrActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout ConcLayout = new javax.swing.GroupLayout(Conc);
        Conc.setLayout(ConcLayout);
        ConcLayout.setHorizontalGroup(
            ConcLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Titlec, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(Titlec1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ConcLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(ConcLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ConcLayout.createSequentialGroup()
                        .addComponent(lbyr1, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tfKemb, javax.swing.GroupLayout.PREFERRED_SIZE, 486, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(btnBayar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnPrint, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(ConcLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addGroup(ConcLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(ConcLayout.createSequentialGroup()
                                .addComponent(ltotal)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(tfTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(ConcLayout.createSequentialGroup()
                                .addComponent(lbyr, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(tfByr, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(28, 28, 28)))
                        .addComponent(btnByr, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))))
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        ConcLayout.setVerticalGroup(
            ConcLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ConcLayout.createSequentialGroup()
                .addComponent(Titlec, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnBayar, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Titlec1, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(ConcLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(ConcLayout.createSequentialGroup()
                        .addGroup(ConcLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(ltotal)
                            .addComponent(tfTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(ConcLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tfByr, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbyr)))
                    .addComponent(btnByr, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(ConcLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbyr1)
                    .addComponent(tfKemb, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addComponent(btnPrint, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout ConfirmationLayout = new javax.swing.GroupLayout(Confirmation);
        Confirmation.setLayout(ConfirmationLayout);
        ConfirmationLayout.setHorizontalGroup(
            ConfirmationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Conc, javax.swing.GroupLayout.PREFERRED_SIZE, 680, Short.MAX_VALUE)
        );
        ConfirmationLayout.setVerticalGroup(
            ConfirmationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Conc, javax.swing.GroupLayout.PREFERRED_SIZE, 659, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("KONFIRMASI", Confirmation);

        Coni.setBackground(new java.awt.Color(255, 255, 255));
        Coni.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 153, 153), 6, true));
        Coni.setForeground(new java.awt.Color(30, 30, 30));
        Coni.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        Titlei.setBackground(new java.awt.Color(255, 153, 102));
        Titlei.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 5));

        titled4.setFont(new java.awt.Font("Showcard Gothic", 2, 36)); // NOI18N
        titled4.setForeground(new java.awt.Color(0, 0, 0));
        titled4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        titled4.setText("NOTA PEMBELIAN");

        javax.swing.GroupLayout TitleiLayout = new javax.swing.GroupLayout(Titlei);
        Titlei.setLayout(TitleiLayout);
        TitleiLayout.setHorizontalGroup(
            TitleiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, TitleiLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(titled4, javax.swing.GroupLayout.PREFERRED_SIZE, 342, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(146, 146, 146))
        );
        TitleiLayout.setVerticalGroup(
            TitleiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, TitleiLayout.createSequentialGroup()
                .addGap(0, 12, Short.MAX_VALUE)
                .addComponent(titled4))
        );

        Coni.add(Titlei, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 6, 665, -1));

        taNota.setEditable(false);
        taNota.setColumns(20);
        taNota.setRows(5);
        jScrollPane2.setViewportView(taNota);

        Coni.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 129, 653, 400));

        btnDone.setBackground(new java.awt.Color(204, 102, 0));
        btnDone.setFont(new java.awt.Font("Segoe UI Black", 1, 24)); // NOI18N
        btnDone.setForeground(new java.awt.Color(0, 0, 0));
        btnDone.setText("SELESAI");
        btnDone.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDoneActionPerformed(evt);
            }
        });
        Coni.add(btnDone, new org.netbeans.lib.awtextra.AbsoluteConstraints(18, 603, 647, -1));

        jLabel1.setFont(new java.awt.Font("Segoe UI Black", 2, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 0));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("DarmajiSungutz@gmail.com");
        Coni.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 570, 454, 20));

        jLabel3.setFont(new java.awt.Font("Segoe UI Black", 2, 12)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 0, 0));
        jLabel3.setText("KHAS SUMENEP");
        Coni.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 90, -1, 20));

        jLabel4.setFont(new java.awt.Font("Segoe UI Black", 2, 12)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 0, 0));
        jLabel4.setText("Jl. Gemini No.42, Desa Kolor, Kab. Sumenep, Madura, Jawa Timur ");
        Coni.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 110, -1, -1));

        jLabel2.setFont(new java.awt.Font("Segoe UI Black", 2, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 0, 0));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("WAROENK PAK SUNGUT SPESIALIS BUMBU HITAM");
        Coni.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 70, 454, 26));

        jLabel5.setFont(new java.awt.Font("Segoe UI Black", 2, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(0, 0, 0));
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("Apabila ada komplain silahkan hubungi nomor/ e-mail dibawah ini");
        Coni.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 530, 490, 20));

        jLabel6.setFont(new java.awt.Font("Segoe UI Black", 2, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(0, 0, 0));
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("+62 812 3037 7124");
        Coni.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 550, 454, 20));

        javax.swing.GroupLayout InvoiceLayout = new javax.swing.GroupLayout(Invoice);
        Invoice.setLayout(InvoiceLayout);
        InvoiceLayout.setHorizontalGroup(
            InvoiceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Coni, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        InvoiceLayout.setVerticalGroup(
            InvoiceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Coni, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("NOTA", Invoice);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 795, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    private void loadDatamam() {
        modela.setRowCount(0);
        
        try {
            String sql = "SELECT * FROM makanan";
            PreparedStatement ps = conn.prepareStatement(sql);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                modela.addRow(new Object[]{
                    rs.getInt("id"),
                    rs.getString("nama_makanan"),
                    rs.getString("harga_makanan"),
                    rs.getString("jumlah_makanan"),
                    rs.getString("total_harga")
                });
            }
        } catch (SQLException e) {
            System.out.println("Error Save Data" + e.getMessage());
        }
    }
    
    private void loadDataMinum() {
    modelb.setRowCount(0);
    try {
        String sql = "SELECT * FROM minuman";
        PreparedStatement ps = conn.prepareStatement(sql);
        ResultSet rs = ps.executeQuery();
        while (rs.next()) {
            modelb.addRow(new Object[]{
                rs.getInt("id"),
                rs.getString("nama_minuman"),
                rs.getInt("harga_minuman"),
                rs.getInt("jumlah_minuman"),
                rs.getInt("total_harga")
            });
        }
    } catch (SQLException e) {
        System.out.println("Error loading minuman data: " + e.getMessage());
    }
}

    private void loadDataCuci() {
    modelc.setRowCount(0);
    try {
        String sql = "SELECT * FROM pencuci_mulut";
        PreparedStatement ps = conn.prepareStatement(sql);
        ResultSet rs = ps.executeQuery();
        while (rs.next()) {
            modelc.addRow(new Object[]{
                rs.getInt("id"),
                rs.getString("nama_mulut"),
                rs.getInt("harga_mulut"),
                rs.getInt("jumlah_mulut"),
                rs.getInt("total_harga")
            });
        }
    } catch (SQLException e) {
        System.out.println("Error loading pencuci_mulut data: " + e.getMessage());
    }
}

private void loadDataAll() {
    modeld.setRowCount(0);
    int rowCounter = 1;

    try {
        String sql = "SELECT id, nama_makanan AS nama, harga_makanan AS harga, jumlah_makanan AS jumlah, total_harga FROM makanan " +
                     "UNION ALL " +
                     "SELECT id, nama_minuman AS nama, harga_minuman AS harga, jumlah_minuman AS jumlah, total_harga FROM minuman " +
                     "UNION ALL " +
                     "SELECT id, nama_mulut AS nama, harga_mulut AS harga, jumlah_mulut AS jumlah, total_harga FROM pencuci_mulut";
        
        PreparedStatement ps = conn.prepareStatement(sql);
        ResultSet rs = ps.executeQuery();
        
        while (rs.next()) {
            modeld.addRow(new Object[]{
                rowCounter++,           
                rs.getString("nama"),
                rs.getInt("harga"),
                rs.getInt("jumlah"),
                rs.getInt("total_harga")
            });
        }
    } catch (SQLException e) {
        System.out.println("Error loading combined data: " + e.getMessage());
    }
}

private void displayNota() {
    taNota.setText("");

    taNota.append("No  Nama Pesanan     Harga   Jumlah  Total\n");
    taNota.append("--------------------------------------------\n");

    DefaultTableModel model = (DefaultTableModel) tblData.getModel();
    int totalHarga = 0;

    for (int i = 0; i < model.getRowCount(); i++) {
        int urutan = (int) model.getValueAt(i, 0);         
        String namaPesanan = (String) model.getValueAt(i, 1); 
        int harga = (int) model.getValueAt(i, 2);            
        int jumlah = (int) model.getValueAt(i, 3);           
        int total = (int) model.getValueAt(i, 4);            

        taNota.append(String.format("%-4d%-15s%-8d%-8d%-8d\n", urutan, namaPesanan, harga, jumlah, total));
        
        totalHarga += total;
    }

    taNota.append("--------------------------------------------\n");
    taNota.append(String.format("Total Harga: %d\n", totalHarga));

    int pembayaran = Integer.parseInt(tfByr.getText());

    int kembalian = pembayaran - totalHarga;

    taNota.append(String.format("Pembayaran: %d\n", pembayaran));
    taNota.append(String.format("Kembalian : %d\n", kembalian));
    taNota.append("=============================================\n");
    taNota.append("\nINFORMASI PELANGGAN:\n");
    taNota.append("--------------------------------------------\n");

    try {
        String sql = "SELECT id,nama_pemesan, no_meja, status, tanggal FROM orang ORDER BY id DESC LIMIT 1";
        PreparedStatement ps = conn.prepareStatement(sql);
        ResultSet rs = ps.executeQuery();

        if (rs.next()) {
            int id = rs.getInt("id");
            String namaPemesan = rs.getString("nama_pemesan");
            int noMeja = rs.getInt("no_meja");
            String status = rs.getString("status");
            String tanggal = rs.getString("tanggal");

            taNota.append(String.format("Urutan Pesanan : %s\n", id));
            taNota.append(String.format("Nama Pemesan   : %s\n", namaPemesan));
            taNota.append(String.format("No Meja        : %d\n", noMeja));
            taNota.append(String.format("Status         : %s\n", status));
            taNota.append(String.format("Tanggal        : %s\n", tanggal));    
        }
        
        rs.close();
        ps.close();
    } catch (SQLException e) {
        System.out.println("Error fetching data from orang: " + e.getMessage());
    }
    
}



    private void rbBebekhActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbBebekhActionPerformed
    ImageIcon bebek = new ImageIcon(getClass().getResource("img/bebek blek.jpg"));
    
    int opsi = JOptionPane.showConfirmDialog(this,"BEBEK HITAM \n Bebek ini dibaluri dengan bumbu hitam yang kaya akan rempah dengan cita rasa khas madura\n nb = sudah dengan nasi \n HARGA : Rp. 25.000,00 \n Apakah anda ingin memesan makanan ini ","DESKRIPSI",JOptionPane.YES_NO_OPTION, JOptionPane.INFORMATION_MESSAGE, bebek);
    if(opsi == JOptionPane.YES_OPTION){
        String jumlahInput = JOptionPane.showInputDialog("Masukkan jumlah pesanan yang anda inginkan = ");
      if (jumlahInput == null || jumlahInput.trim().isEmpty()) {
          JOptionPane.showMessageDialog(null, "Jumlah pesanan invalid", "ERROR", JOptionPane.ERROR_MESSAGE);
      } else {
          int jumlah = Integer.parseInt(jumlahInput);
          if (jumlah == 0) {
              JOptionPane.showMessageDialog(null, "Jumlah pesanan invalid", "ERROR", JOptionPane.ERROR_MESSAGE);
          } else {
            int harga = 25000;
            int total = jumlah * harga;
            
            int urutanPesanan = modela.getRowCount() + 1;
            modela.addRow(new Object[]{urutanPesanan, "BEBEK HITAM", harga, jumlah, total});

            try {
                String sql = "INSERT INTO makanan (nama_makanan, harga_makanan, jumlah_makanan, total_harga) VALUES (?, ?, ?, ?)";
                PreparedStatement ps = conn.prepareStatement(sql);
                ps.setString(1, "BEBEK HITAM");
                ps.setInt(2, harga);
                ps.setInt(3, jumlah);
                ps.setInt(4, total);
                ps.executeUpdate();
                loadDatamam();
                loadDataAll();
                ps.close();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, "Database error: " + e.getMessage());
            }
           }
    }
    }
    }//GEN-LAST:event_rbBebekhActionPerformed

    private void rbAyamhActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbAyamhActionPerformed
    ImageIcon ayam = new ImageIcon(getClass().getResource("img/yam blek.jpg"));
    
    int opsi = JOptionPane.showConfirmDialog(this,"AYAM HITAM \n Ayam ini dibaluri dengan bumbu hitam yang kaya akan rempah dengan cita rasa khas madura\n nb = sudah dengan nasi \n HARGA : Rp. 25.000,00 \n Apakah anda ingin memesan makanan ini ","DESKRIPSI",JOptionPane.YES_NO_OPTION, JOptionPane.INFORMATION_MESSAGE, ayam);
    if(opsi == JOptionPane.YES_OPTION){
        String jumlahInput = JOptionPane.showInputDialog("Masukkan jumlah pesanan yang anda inginkan = ");
      if (jumlahInput == null || jumlahInput.trim().isEmpty()) {
          JOptionPane.showMessageDialog(null, "Jumlah pesanan invalid", "ERROR", JOptionPane.ERROR_MESSAGE);
      } else {
          int jumlah = Integer.parseInt(jumlahInput);
          if (jumlah == 0) {
              JOptionPane.showMessageDialog(null, "Jumlah pesanan invalid", "ERROR", JOptionPane.ERROR_MESSAGE);
          } else {
            int harga = 23000;
            int total = jumlah * harga;
            
            int urutanPesanan = modela.getRowCount() + 1;
            modela.addRow(new Object[]{urutanPesanan, "AYAM HITAM", harga, jumlah, total});

            try {
                String sql = "INSERT INTO makanan (nama_makanan, harga_makanan, jumlah_makanan, total_harga) VALUES (?, ?, ?, ?)";
                PreparedStatement ps = conn.prepareStatement(sql);
                ps.setString(1, "AYAM HITAM");
                ps.setInt(2, harga);
                ps.setInt(3, jumlah);
                ps.setInt(4, total);
                ps.executeUpdate();
                loadDatamam();
                loadDataAll();
                ps.close();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, "Database error: " + e.getMessage());
            }
           }
      }
    }
    }//GEN-LAST:event_rbAyamhActionPerformed

    private void rbCumiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbCumiActionPerformed
    ImageIcon cumi = new ImageIcon(getClass().getResource("img/cumi blek.jpg"));
    
    int opsi = JOptionPane.showConfirmDialog(this,"CUMI HITAM \n Cumi ini dibumbui dengan bumbu hitam yang kaya akan rempah dengan cita rasa khas madura \n nb = sudah dengan nasi\n HARGA : Rp. 27.000,00 \n Apakah anda ingin memesan makanan ini ","DESKRIPSI",JOptionPane.YES_NO_OPTION, JOptionPane.INFORMATION_MESSAGE, cumi);
    if(opsi == JOptionPane.YES_OPTION){
String jumlahInput = JOptionPane.showInputDialog("Masukkan jumlah pesanan yang anda inginkan = ");
      if (jumlahInput == null || jumlahInput.trim().isEmpty()) {
          JOptionPane.showMessageDialog(null, "Jumlah pesanan invalid", "ERROR", JOptionPane.ERROR_MESSAGE);
      } else {
          int jumlah = Integer.parseInt(jumlahInput);
          if (jumlah == 0) {
              JOptionPane.showMessageDialog(null, "Jumlah pesanan invalid", "ERROR", JOptionPane.ERROR_MESSAGE);
          } else {
            int harga = 27000;
            int total = jumlah * harga;
            
            int urutanPesanan = modela.getRowCount() + 1;
            modela.addRow(new Object[]{urutanPesanan, "CUMI HITAM", harga, jumlah, total});

            try {
                String sql = "INSERT INTO makanan (nama_makanan, harga_makanan, jumlah_makanan, total_harga) VALUES (?, ?, ?, ?)";
                PreparedStatement ps = conn.prepareStatement(sql);
                ps.setString(1, "CUMI HITAM");
                ps.setInt(2, harga);
                ps.setInt(3, jumlah);
                ps.setInt(4, total);
                ps.executeUpdate();
                loadDatamam();
                loadDataAll();
                ps.close();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, "Database error: " + e.getMessage());
            }
           }
    }
    }
    }//GEN-LAST:event_rbCumiActionPerformed

    private void rbBebekActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbBebekActionPerformed
    ImageIcon bebek = new ImageIcon(getClass().getResource("img/bebek biasa.jpeg"));
    
    int opsi = JOptionPane.showConfirmDialog(this,"LALAPAN BEBEK \n Lalapan bebek yang sudah dibumbui dengan bumbu kuning khas madura sehingga sedap nan harum\n nb = sudah dengan nasi \n HARGA : Rp. 21.000,00 \n Apakah anda ingin memesan makanan ini ","DESKRIPSI",JOptionPane.YES_NO_OPTION, JOptionPane.INFORMATION_MESSAGE, bebek);
    if(opsi == JOptionPane.YES_OPTION){
        String jumlahInput = JOptionPane.showInputDialog("Masukkan jumlah pesanan yang anda inginkan = ");
      if (jumlahInput == null || jumlahInput.trim().isEmpty()) {
          JOptionPane.showMessageDialog(null, "Jumlah pesanan invalid", "ERROR", JOptionPane.ERROR_MESSAGE);
      }else {
          int jumlah = Integer.parseInt(jumlahInput);
          if (jumlah == 0) {
              JOptionPane.showMessageDialog(null, "Jumlah pesanan invalid", "ERROR", JOptionPane.ERROR_MESSAGE);
          } else {
            int harga = 21000;
            int total = jumlah * harga;
            
            int urutanPesanan = modela.getRowCount() + 1;
            modela.addRow(new Object[]{urutanPesanan, "LALAPAN BEBEK", harga, jumlah, total});

            try {
                String sql = "INSERT INTO makanan (nama_makanan, harga_makanan, jumlah_makanan, total_harga) VALUES (?, ?, ?, ?)";
                PreparedStatement ps = conn.prepareStatement(sql);
                ps.setString(1, "LALAPAN BEBEK");
                ps.setInt(2, harga);
                ps.setInt(3, jumlah);
                ps.setInt(4, total);
                ps.executeUpdate();
                loadDatamam();
                loadDataAll();
                ps.close();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, "Database error: " + e.getMessage());
            }
           }
    }
    }
    }//GEN-LAST:event_rbBebekActionPerformed

    private void rbAyamActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbAyamActionPerformed
    ImageIcon ayam = new ImageIcon(getClass().getResource("img/ayam biasa.jpeg"));
    
    int opsi = JOptionPane.showConfirmDialog(this,"LALAPAN AYAM \n Lalapan ayam yang sudah dibumbui dengan bumbu kuning khas madura sehingga sedap nan harum\n nb = sudah dengan nasi \n HARGA : Rp. 19.000,00 \n Apakah anda ingin memesan makanan ini ","DESKRIPSI",JOptionPane.YES_NO_OPTION, JOptionPane.INFORMATION_MESSAGE, ayam);
    if(opsi == JOptionPane.YES_OPTION){
        String jumlahInput = JOptionPane.showInputDialog("Masukkan jumlah pesanan yang anda inginkan = ");
      if (jumlahInput == null || jumlahInput.trim().isEmpty()) {
          JOptionPane.showMessageDialog(null, "Jumlah pesanan invalid", "ERROR", JOptionPane.ERROR_MESSAGE);
      } else {
          int jumlah = Integer.parseInt(jumlahInput);
          if (jumlah == 0) {
              JOptionPane.showMessageDialog(null, "Jumlah pesanan invalid", "ERROR", JOptionPane.ERROR_MESSAGE);
          } else {
            int harga = 19000;
            int total = jumlah * harga;
            
            int urutanPesanan = modela.getRowCount() + 1;
            modela.addRow(new Object[]{urutanPesanan, "LALAPAN AYAM", harga, jumlah, total});

            try {
                String sql = "INSERT INTO makanan (nama_makanan, harga_makanan, jumlah_makanan, total_harga) VALUES (?, ?, ?, ?)";
                PreparedStatement ps = conn.prepareStatement(sql);
                ps.setString(1, "LALAPAN AYAM");
                ps.setInt(2, harga);
                ps.setInt(3, jumlah);
                ps.setInt(4, total);
                ps.executeUpdate();
                loadDatamam();
                loadDataAll();
                ps.close();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, "Database error: " + e.getMessage());
            }
           }
      }
    }
    }//GEN-LAST:event_rbAyamActionPerformed

    private void rbNasiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbNasiActionPerformed
    ImageIcon nasi = new ImageIcon(getClass().getResource("img/nasi.jpg"));
    
    int opsi = JOptionPane.showConfirmDialog(this,"Nasi \n Nasi yang diaduk dengan daun jeruk sehingga menimbulkan aroma yang sedap \n nb = sudah dengan nasi \n HARGA : Rp. 4.000,00 \n Apakah anda ingin memesan makanan ini ","DESKRIPSI",JOptionPane.YES_NO_OPTION, JOptionPane.INFORMATION_MESSAGE, nasi);
    if(opsi == JOptionPane.YES_OPTION){
        String jumlahInput = JOptionPane.showInputDialog("Masukkan jumlah pesanan yang anda inginkan = ");
      if (jumlahInput == null || jumlahInput.trim().isEmpty()) {
          JOptionPane.showMessageDialog(null, "Jumlah pesanan invalid", "ERROR", JOptionPane.ERROR_MESSAGE);
      } else {
          int jumlah = Integer.parseInt(jumlahInput);
          if (jumlah == 0) {
              JOptionPane.showMessageDialog(null, "Jumlah pesanan invalid", "ERROR", JOptionPane.ERROR_MESSAGE);
          } else {
            int harga = 4000;
            int total = jumlah * harga;
            
            int urutanPesanan = modela.getRowCount() + 1;
            modela.addRow(new Object[]{urutanPesanan, "NASI", harga, jumlah, total});

            try {
                String sql = "INSERT INTO makanan (nama_makanan, harga_makanan, jumlah_makanan, total_harga) VALUES (?, ?, ?, ?)";
                PreparedStatement ps = conn.prepareStatement(sql);
                ps.setString(1, "NASI");
                ps.setInt(2, harga);
                ps.setInt(3, jumlah);
                ps.setInt(4, total);
                ps.executeUpdate();
                loadDatamam();
                loadDataAll();
                ps.close();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, "Database error: " + e.getMessage());
            }
           }
    }
    }
    }//GEN-LAST:event_rbNasiActionPerformed

    private void rbAirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbAirActionPerformed
    ImageIcon air = new ImageIcon(getClass().getResource("img/air.jpg"));
        
    int opsi1 = JOptionPane.showConfirmDialog(this,"AIR \n Air mineral AQUA yang diambil dari pedalaman everest sehingga memberi rasa yang sejuk dan manis \n HARGA : Rp. 5.000,00 \n Apakah anda ingin memesan makanan ini ","DESKRIPSI",JOptionPane.YES_NO_OPTION, JOptionPane.INFORMATION_MESSAGE, air);
    if(opsi1 == JOptionPane.YES_OPTION){
        String opsi2 = JOptionPane.showInputDialog("Masukkan tipe minuman yang anda mau = (Dingin/Biasa)");
        if(opsi2.equals("Dingin") || opsi2.equals("dingin")){
    String jumlahInput = JOptionPane.showInputDialog("Masukkan jumlah pesanan yang anda inginkan = ");
      if (jumlahInput == null || jumlahInput.trim().isEmpty()) {
          JOptionPane.showMessageDialog(null, "Jumlah pesanan invalid", "ERROR", JOptionPane.ERROR_MESSAGE);
      } else {
          int jumlah = Integer.parseInt(jumlahInput);
          if (jumlah == 0) {
              JOptionPane.showMessageDialog(null, "Jumlah pesanan invalid", "ERROR", JOptionPane.ERROR_MESSAGE);
          } else {
            int harga = 5000;
            int total = jumlah * harga;
            
            int urutanPesanan = modela.getRowCount() + 1;
            modela.addRow(new Object[]{urutanPesanan, "AIR DINGIN", harga, jumlah, total});

            try {
                String sql = "INSERT INTO minuman (nama_minuman, harga_minuman, jumlah_minuman, total_harga) VALUES (?, ?, ?, ?)";
                PreparedStatement ps = conn.prepareStatement(sql);
                ps.setString(1, "AIR DINGIN");
                ps.setInt(2, harga);
                ps.setInt(3, jumlah);
                ps.setInt(4, total);
                ps.executeUpdate();
                loadDataMinum();
                loadDataAll();
                ps.close();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, "Database error: " + e.getMessage());
            }
           }
      }
    }else if(opsi2.equals("Biasa") || opsi2.equals("biasa")){
String jumlahInput = JOptionPane.showInputDialog("Masukkan jumlah pesanan yang anda inginkan = ");
      if (jumlahInput == null || jumlahInput.trim().isEmpty()) {
          JOptionPane.showMessageDialog(null, "Jumlah pesanan invalid", "ERROR", JOptionPane.ERROR_MESSAGE);
      } else {
          int jumlah = Integer.parseInt(jumlahInput);
          if (jumlah == 0) {
              JOptionPane.showMessageDialog(null, "Jumlah pesanan invalid", "ERROR", JOptionPane.ERROR_MESSAGE);
          } else {
            int harga = 5000;
            int total = jumlah * harga;
            
            int urutanPesanan = modela.getRowCount() + 1;
            modela.addRow(new Object[]{urutanPesanan, "AIR BIASA", harga, jumlah, total});

            try {
                String sql = "INSERT INTO minuman (nama_minuman, harga_minuman, jumlah_minuman, total_harga) VALUES (?, ?, ?, ?)";
                PreparedStatement ps = conn.prepareStatement(sql);
                ps.setString(1, "AIR BIASA");
                ps.setInt(2, harga);
                ps.setInt(3, jumlah);
                ps.setInt(4, total);
                ps.executeUpdate();
                loadDataMinum();
                loadDataAll();
                ps.close();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, "Database error: " + e.getMessage());
            }
           }
      }
    }else {
        JOptionPane.showMessageDialog(this,"Masukkan hanya Dingin atau Biasa","ERROR", JOptionPane.ERROR_MESSAGE);
    }
    }
    }//GEN-LAST:event_rbAirActionPerformed

    private void rbTehActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbTehActionPerformed
    ImageIcon teh = new ImageIcon(getClass().getResource("img/teh.jpeg"));
        
    int opsi1 = JOptionPane.showConfirmDialog(this,"TEH \n Teh yang diolah dengan daun pilihan seperti malika sehingga memberi cita rasa yang khas \n HARGA : Rp. 6.000,00 \n Apakah anda ingin memesan makanan ini ","DESKRIPSI",JOptionPane.YES_NO_OPTION, JOptionPane.INFORMATION_MESSAGE, teh);
    if(opsi1 == JOptionPane.YES_OPTION){
        String opsi2 = JOptionPane.showInputDialog("Masukkan tipe minuman yang anda mau = (Es/Hangat)");
        if(opsi2.equals("Es") || opsi2.equals("es")){
String jumlahInput = JOptionPane.showInputDialog("Masukkan jumlah pesanan yang anda inginkan = ");
      if (jumlahInput == null || jumlahInput.trim().isEmpty()) {
          JOptionPane.showMessageDialog(null, "Jumlah pesanan invalid", "ERROR", JOptionPane.ERROR_MESSAGE);
      } else {
          int jumlah = Integer.parseInt(jumlahInput);
          if (jumlah == 0) {
              JOptionPane.showMessageDialog(null, "Jumlah pesanan invalid", "ERROR", JOptionPane.ERROR_MESSAGE);
          } else {
            int harga = 6000;
            int total = jumlah * harga;
            
            int urutanPesanan = modela.getRowCount() + 1;
            modela.addRow(new Object[]{urutanPesanan, "AIR DINGIN", harga, jumlah, total});

            try {
                String sql = "INSERT INTO minuman (nama_minuman, harga_minuman, jumlah_minuman, total_harga) VALUES (?, ?, ?, ?)";
                PreparedStatement ps = conn.prepareStatement(sql);
                ps.setString(1, "ES TEH");
                ps.setInt(2, harga);
                ps.setInt(3, jumlah);
                ps.setInt(4, total);
                ps.executeUpdate();
                loadDataMinum();
                loadDataAll();
                ps.close();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, "Database error: " + e.getMessage());
            }
           }
      }
    }else if(opsi2.equals("Hangat") || opsi2.equals("hangat")){
String jumlahInput = JOptionPane.showInputDialog("Masukkan jumlah pesanan yang anda inginkan = ");
      if (jumlahInput == null || jumlahInput.trim().isEmpty()) {
          JOptionPane.showMessageDialog(null, "Jumlah pesanan invalid", "ERROR", JOptionPane.ERROR_MESSAGE);
      } else {
          int jumlah = Integer.parseInt(jumlahInput);
          if (jumlah == 0) {
              JOptionPane.showMessageDialog(null, "Jumlah pesanan invalid", "ERROR", JOptionPane.ERROR_MESSAGE);
          } else {
            int harga = 6000;
            int total = jumlah * harga;
            
            int urutanPesanan = modela.getRowCount() + 1;
            modela.addRow(new Object[]{urutanPesanan, "TEH HANGAT", harga, jumlah, total});

            try {
                String sql = "INSERT INTO minuman (nama_minuman, harga_minuman, jumlah_minuman, total_harga) VALUES (?, ?, ?, ?)";
                PreparedStatement ps = conn.prepareStatement(sql);
                ps.setString(1, "TEH HANGAT");
                ps.setInt(2, harga);
                ps.setInt(3, jumlah);
                ps.setInt(4, total);
                ps.executeUpdate();
                loadDataMinum();
                loadDataAll();
                ps.close();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, "Database error: " + e.getMessage());
            }
           }
      }
    }else {
        JOptionPane.showMessageDialog(this,"Masukkan hanya Dingin atau Biasa","ERROR", JOptionPane.ERROR_MESSAGE);
    }
    }
    }//GEN-LAST:event_rbTehActionPerformed

    private void rbJrukActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbJrukActionPerformed
    ImageIcon jruk = new ImageIcon(getClass().getResource("img/jruk.jpg"));
        
    int opsi1 = JOptionPane.showConfirmDialog(this,"JERUK \n Jeruk yang segar, diperas dengan cengkraman yang membuat perasan lebih nikmat \n HARGA : Rp. 7.000,00 \n Apakah anda ingin memesan makanan ini ","DESKRIPSI",JOptionPane.YES_NO_OPTION, JOptionPane.INFORMATION_MESSAGE, jruk);
    if(opsi1 == JOptionPane.YES_OPTION){
        String opsi2 = JOptionPane.showInputDialog("Masukkan tipe minuman yang anda mau = (Es/Hangat)");
        if(opsi2.equals("Es") || opsi2.equals("es")){
String jumlahInput = JOptionPane.showInputDialog("Masukkan jumlah pesanan yang anda inginkan = ");
      if (jumlahInput == null || jumlahInput.trim().isEmpty()) {
          JOptionPane.showMessageDialog(null, "Jumlah pesanan invalid", "ERROR", JOptionPane.ERROR_MESSAGE);
      } else {
          int jumlah = Integer.parseInt(jumlahInput);
          if (jumlah == 0) {
              JOptionPane.showMessageDialog(null, "Jumlah pesanan invalid", "ERROR", JOptionPane.ERROR_MESSAGE);
          } else {
            int harga = 7000;
            int total = jumlah * harga;
            
            int urutanPesanan = modela.getRowCount() + 1;
            modela.addRow(new Object[]{urutanPesanan, "ES JERUK", harga, jumlah, total});

            try {
                String sql = "INSERT INTO minuman (nama_minuman, harga_minuman, jumlah_minuman, total_harga) VALUES (?, ?, ?, ?)";
                PreparedStatement ps = conn.prepareStatement(sql);
                ps.setString(1, "ES JERUK");
                ps.setInt(2, harga);
                ps.setInt(3, jumlah);
                ps.setInt(4, total);
                ps.executeUpdate();
                loadDataMinum();
                loadDataAll();
                ps.close();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, "Database error: " + e.getMessage());
            }
           }
      }
    }else if(opsi2.equals("Hangat") || opsi2.equals("hangat")){
String jumlahInput = JOptionPane.showInputDialog("Masukkan jumlah pesanan yang anda inginkan = ");
      if (jumlahInput == null || jumlahInput.trim().isEmpty()) {
          JOptionPane.showMessageDialog(null, "Jumlah pesanan invalid", "ERROR", JOptionPane.ERROR_MESSAGE);
      } else {
          int jumlah = Integer.parseInt(jumlahInput);
          if (jumlah == 0) {
              JOptionPane.showMessageDialog(null, "Jumlah pesanan invalid", "ERROR", JOptionPane.ERROR_MESSAGE);
          } else {
            int harga = 7000;
            int total = jumlah * harga;
            
            int urutanPesanan = modela.getRowCount() + 1;
            modela.addRow(new Object[]{urutanPesanan, "JERUK HANGAT", harga, jumlah, total});

            try {
                String sql = "INSERT INTO minuman (nama_minuman, harga_minuman, jumlah_minuman, total_harga) VALUES (?, ?, ?, ?)";
                PreparedStatement ps = conn.prepareStatement(sql);
                ps.setString(1, "JERUK HANGAT");
                ps.setInt(2, harga);
                ps.setInt(3, jumlah);
                ps.setInt(4, total);
                ps.executeUpdate();
                loadDataMinum();
                loadDataAll();
                ps.close();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, "Database error: " + e.getMessage());
            }
           }
      }
    }else {
        JOptionPane.showMessageDialog(this,"Masukkan hanya Dingin atau Biasa","ERROR", JOptionPane.ERROR_MESSAGE);
    }
    }
    }//GEN-LAST:event_rbJrukActionPerformed

    private void rbSogemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbSogemActionPerformed
    ImageIcon sgem = new ImageIcon(getClass().getResource("img/sogem.jpeg"));
        
    int opsi1 = JOptionPane.showConfirmDialog(this,"SODA SENANG \n Soda Senang dengan perpaduan soda dan sirum cocopandan yang dijamin bisa membuat anda kegirangan saat meminumnya \n HARGA : Rp. 10.000,00 \n Apakah anda ingin memesan makanan ini ","DESKRIPSI",JOptionPane.YES_NO_OPTION, JOptionPane.INFORMATION_MESSAGE, sgem);
    if(opsi1 == JOptionPane.YES_OPTION){     
String jumlahInput = JOptionPane.showInputDialog("Masukkan jumlah pesanan yang anda inginkan = ");
      if (jumlahInput == null || jumlahInput.trim().isEmpty()) {
          JOptionPane.showMessageDialog(null, "Jumlah pesanan invalid", "ERROR", JOptionPane.ERROR_MESSAGE);
      } else {
          int jumlah = Integer.parseInt(jumlahInput);
          if (jumlah == 0) {
              JOptionPane.showMessageDialog(null, "Jumlah pesanan invalid", "ERROR", JOptionPane.ERROR_MESSAGE);
          } else {
            int harga = 10000;
            int total = jumlah * harga;
            
            int urutanPesanan = modela.getRowCount() + 1;
            modela.addRow(new Object[]{urutanPesanan, "ES SODA SENANG", harga, jumlah, total});

            try {
                String sql = "INSERT INTO minuman (nama_minuman, harga_minuman, jumlah_minuman, total_harga) VALUES (?, ?, ?, ?)";
                PreparedStatement ps = conn.prepareStatement(sql);
                ps.setString(1, "ES SODA SENANG");
                ps.setInt(2, harga);
                ps.setInt(3, jumlah);
                ps.setInt(4, total);
                ps.executeUpdate();
                loadDataMinum();
                loadDataAll();
                ps.close();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, "Database error: " + e.getMessage());
            }
           }
    }
    }
    }//GEN-LAST:event_rbSogemActionPerformed

    private void rbJosuaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbJosuaActionPerformed
    ImageIcon jsua = new ImageIcon(getClass().getResource("img/josua.jpg"));
        
    int opsi1 = JOptionPane.showConfirmDialog(this,"JOSUSU \n Extrajoss dengan perpaduan susu yang dapat membuat mata kaum supir cetar membahana \n HARGA : Rp. 7.500,00 \n Apakah anda ingin memesan makanan ini ","DESKRIPSI",JOptionPane.YES_NO_OPTION, JOptionPane.INFORMATION_MESSAGE, jsua);
    if(opsi1 == JOptionPane.YES_OPTION){    
String jumlahInput = JOptionPane.showInputDialog("Masukkan jumlah pesanan yang anda inginkan = ");
      if (jumlahInput == null || jumlahInput.trim().isEmpty()) {
          JOptionPane.showMessageDialog(null, "Jumlah pesanan invalid", "ERROR", JOptionPane.ERROR_MESSAGE);
      } else {
          int jumlah = Integer.parseInt(jumlahInput);
          if (jumlah == 0) {
              JOptionPane.showMessageDialog(null, "Jumlah pesanan invalid", "ERROR", JOptionPane.ERROR_MESSAGE);
          } else {
            int harga = 7500;
            int total = jumlah * harga;
            
            int urutanPesanan = modela.getRowCount() + 1;
            modela.addRow(new Object[]{urutanPesanan, "ES JOSUSU", harga, jumlah, total});

            try {
                String sql = "INSERT INTO minuman (nama_minuman, harga_minuman, jumlah_minuman, total_harga) VALUES (?, ?, ?, ?)";
                PreparedStatement ps = conn.prepareStatement(sql);
                ps.setString(1, "ES JOSUSU");
                ps.setInt(2, harga);
                ps.setInt(3, jumlah);
                ps.setInt(4, total);
                ps.executeUpdate();
                loadDataMinum();
                loadDataAll();
                ps.close();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, "Database error: " + e.getMessage());
            }
            }
           }
    }
    }//GEN-LAST:event_rbJosuaActionPerformed

    private void rbCendolActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbCendolActionPerformed
    ImageIcon cdl = new ImageIcon(getClass().getResource("img/cendol.jpg"));
        
    int opsi1 = JOptionPane.showConfirmDialog(this,"CENDOEL \n Cendol yang dibuat memakai santan dengan cita rasa khas berlemak dapat membuat dahaga anda terasa hilang seketika \n HARGA : Rp. 8.500,00 \n Apakah anda ingin memesan makanan ini ","DESKRIPSI",JOptionPane.YES_NO_OPTION, JOptionPane.INFORMATION_MESSAGE, cdl);
    if(opsi1 == JOptionPane.YES_OPTION){    
String jumlahInput = JOptionPane.showInputDialog("Masukkan jumlah pesanan yang anda inginkan = ");
      if (jumlahInput == null || jumlahInput.trim().isEmpty()) {
          JOptionPane.showMessageDialog(null, "Jumlah pesanan invalid", "ERROR", JOptionPane.ERROR_MESSAGE);
      } else {
          int jumlah = Integer.parseInt(jumlahInput);
          if (jumlah == 0) {
              JOptionPane.showMessageDialog(null, "Jumlah pesanan invalid", "ERROR", JOptionPane.ERROR_MESSAGE);
          } else {
            int harga = 8500;
            int total = jumlah * harga;
            
            int urutanPesanan = modela.getRowCount() + 1;
            modela.addRow(new Object[]{urutanPesanan, "ES CENDOEL", harga, jumlah, total});

            try {
                String sql = "INSERT INTO minuman (nama_minuman, harga_minuman, jumlah_minuman, total_harga) VALUES (?, ?, ?, ?)";
                PreparedStatement ps = conn.prepareStatement(sql);
                ps.setString(1, "ES CENDOEL");
                ps.setInt(2, harga);
                ps.setInt(3, jumlah);
                ps.setInt(4, total);
                ps.executeUpdate();
                loadDataMinum();
                loadDataAll();
                ps.close();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, "Database error: " + e.getMessage());
            }
            }
           }
    }
    }//GEN-LAST:event_rbCendolActionPerformed

    private void rbGetasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbGetasActionPerformed
    ImageIcon gtas = new ImageIcon(getClass().getResource("img/getas.jpeg"));
        
    int opsi1 = JOptionPane.showConfirmDialog(this,"GETAS \n Getas, cemilan khas sumenep yang dibuat dari tepung ketan yang manis dan parutan kelapa yang gurih  \n HARGA : Rp. 12.000,00 \n Apakah anda ingin memesan makanan ini ","DESKRIPSI",JOptionPane.YES_NO_OPTION, JOptionPane.INFORMATION_MESSAGE, gtas);
    if(opsi1 == JOptionPane.YES_OPTION){    
String jumlahInput = JOptionPane.showInputDialog("Masukkan jumlah pesanan yang anda inginkan = ");
      if (jumlahInput == null || jumlahInput.trim().isEmpty()) {
          JOptionPane.showMessageDialog(null, "Jumlah pesanan invalid", "ERROR", JOptionPane.ERROR_MESSAGE);
      } else {
          int jumlah = Integer.parseInt(jumlahInput);
          if (jumlah == 0) {
              JOptionPane.showMessageDialog(null, "Jumlah pesanan invalid", "ERROR", JOptionPane.ERROR_MESSAGE);
          } else {
            int harga = 12000;
            int total = jumlah * harga;
            
            int urutanPesanan = modela.getRowCount() + 1;
            modela.addRow(new Object[]{urutanPesanan, "GETAS", harga, jumlah, total});

            try {
                String sql = "INSERT INTO pencuci_mulut (nama_mulut, harga_mulut, jumlah_mulut, total_harga) VALUES (?, ?, ?, ?)";
                PreparedStatement ps = conn.prepareStatement(sql);
                ps.setString(1, "GETAS");
                ps.setInt(2, harga);
                ps.setInt(3, jumlah);
                ps.setInt(4, total);
                ps.executeUpdate();
                loadDataCuci();
                loadDataAll();
                ps.close();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, "Database error: " + e.getMessage());
            }
            }
           }
    }
    }//GEN-LAST:event_rbGetasActionPerformed

    private void rbHoljActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbHoljActionPerformed
    ImageIcon hol = new ImageIcon(getClass().getResource("img/holjannah.jpg"));
        
    int opsi1 = JOptionPane.showConfirmDialog(this,"HOLJANNAH \n Holjannah, roti yang berbentuk spiral ini terasa sangat gurih dengan baluran karamel yang manis  \n HARGA : Rp. 10.000,00 \n Apakah anda ingin memesan makanan ini ","DESKRIPSI",JOptionPane.YES_NO_OPTION, JOptionPane.INFORMATION_MESSAGE, hol);
    if(opsi1 == JOptionPane.YES_OPTION){    
String jumlahInput = JOptionPane.showInputDialog("Masukkan jumlah pesanan yang anda inginkan = ");
      if (jumlahInput == null || jumlahInput.trim().isEmpty()) {
          JOptionPane.showMessageDialog(null, "Jumlah pesanan invalid", "ERROR", JOptionPane.ERROR_MESSAGE);
      } else {
          int jumlah = Integer.parseInt(jumlahInput);
          if (jumlah == 0) {
              JOptionPane.showMessageDialog(null, "Jumlah pesanan invalid", "ERROR", JOptionPane.ERROR_MESSAGE);
          } else {
            int harga = 12000;
            int total = jumlah * harga;
            
            int urutanPesanan = modela.getRowCount() + 1;
            modela.addRow(new Object[]{urutanPesanan, "HOLJANNAH", harga, jumlah, total});

            try {
                String sql = "INSERT INTO pencuci_mulut (nama_mulut, harga_mulut, jumlah_mulut, total_harga) VALUES (?, ?, ?, ?)";
                PreparedStatement ps = conn.prepareStatement(sql);
                ps.setString(1, "HOLJANNAH");
                ps.setInt(2, harga);
                ps.setInt(3, jumlah);
                ps.setInt(4, total);
                ps.executeUpdate();
                loadDataCuci();
                loadDataAll();
                ps.close();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, "Database error: " + e.getMessage());
            }
            }
           }
    }
    }//GEN-LAST:event_rbHoljActionPerformed

    private void rbDurenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbDurenActionPerformed
    ImageIcon dur = new ImageIcon(getClass().getResource("img/es duren.jpeg"));
        
    int opsi1 = JOptionPane.showConfirmDialog(this,"SERUT DUREN \n Serut duren, serutan es yang halus dilumuri susu kental manis dengan campuran permata, ketan hitam, dan tentunya duren  \n HARGA : Rp. 15.000,00 \n Apakah anda ingin memesan makanan ini ","DESKRIPSI",JOptionPane.YES_NO_OPTION, JOptionPane.INFORMATION_MESSAGE, dur);
    if(opsi1 == JOptionPane.YES_OPTION){    
String jumlahInput = JOptionPane.showInputDialog("Masukkan jumlah pesanan yang anda inginkan = ");
      if (jumlahInput == null || jumlahInput.trim().isEmpty()) {
          JOptionPane.showMessageDialog(null, "Jumlah pesanan invalid", "ERROR", JOptionPane.ERROR_MESSAGE);
      } else {
          int jumlah = Integer.parseInt(jumlahInput);
          if (jumlah == 0) {
              JOptionPane.showMessageDialog(null, "Jumlah pesanan invalid", "ERROR", JOptionPane.ERROR_MESSAGE);
          } else {
            int harga = 15000;
            int total = jumlah * harga;
            
            int urutanPesanan = modela.getRowCount() + 1;
            modela.addRow(new Object[]{urutanPesanan, "SERUT DUREN", harga, jumlah, total});

            try {
                String sql = "INSERT INTO pencuci_mulut (nama_mulut, harga_mulut, jumlah_mulut, total_harga) VALUES (?, ?, ?, ?)";
                PreparedStatement ps = conn.prepareStatement(sql);
                ps.setString(1, "SERUT DUREN");
                ps.setInt(2, harga);
                ps.setInt(3, jumlah);
                ps.setInt(4, total);
                ps.executeUpdate();
                loadDataCuci();
                loadDataAll();
                ps.close();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, "Database error: " + e.getMessage());
            }
            }
           }
    }
    }//GEN-LAST:event_rbDurenActionPerformed

    private void rbKleponActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbKleponActionPerformed
    ImageIcon kle = new ImageIcon(getClass().getResource("img/klepon.jpg"));
        
    int opsi1 = JOptionPane.showConfirmDialog(this,"KLEPON \n Klepon, seperti mochi jepang dengan isian gula merah ditambah parutan kelapa yang menambah cita rasa khas nan harum \n isi 5 per porsi \n HARGA : Rp. 13.000,00 \n Apakah anda ingin memesan makanan ini ","DESKRIPSI",JOptionPane.YES_NO_OPTION, JOptionPane.INFORMATION_MESSAGE, kle);
    if(opsi1 == JOptionPane.YES_OPTION){    
String jumlahInput = JOptionPane.showInputDialog("Masukkan jumlah pesanan yang anda inginkan = ");
      if (jumlahInput == null || jumlahInput.trim().isEmpty()) {
          JOptionPane.showMessageDialog(null, "Jumlah pesanan invalid", "ERROR", JOptionPane.ERROR_MESSAGE);
      } else {
          int jumlah = Integer.parseInt(jumlahInput);
          if (jumlah == 0) {
              JOptionPane.showMessageDialog(null, "Jumlah pesanan invalid", "ERROR", JOptionPane.ERROR_MESSAGE);
          } else {
            int harga = 13000;
            int total = jumlah * harga;
            
            int urutanPesanan = modela.getRowCount() + 1;
            modela.addRow(new Object[]{urutanPesanan, "KLEPON", harga, jumlah, total});

            try {
                String sql = "INSERT INTO pencuci_mulut (nama_mulut, harga_mulut, jumlah_mulut, total_harga) VALUES (?, ?, ?, ?)";
                PreparedStatement ps = conn.prepareStatement(sql);
                ps.setString(1, "KLEPON");
                ps.setInt(2, harga);
                ps.setInt(3, jumlah);
                ps.setInt(4, total);
                ps.executeUpdate();
                loadDataCuci();
                loadDataAll();
                ps.close();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, "Database error: " + e.getMessage());
            }
            }
           }
    }
    }//GEN-LAST:event_rbKleponActionPerformed

    private void rbKocorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbKocorActionPerformed
    ImageIcon koc = new ImageIcon(getClass().getResource("img/kocor.jpeg"));
        
    int opsi1 = JOptionPane.showConfirmDialog(this,"KOCOR \n Serut duren, serutan es yang halus dilumuri susu kental manis dengan campuran permata, ketan hitam, dan tentunya duren  \n HARGA per biji : Rp. 2500,00 \n Apakah anda ingin memesan makanan ini ","DESKRIPSI",JOptionPane.YES_NO_OPTION, JOptionPane.INFORMATION_MESSAGE, koc);
    if(opsi1 == JOptionPane.YES_OPTION){    
String jumlahInput = JOptionPane.showInputDialog("Masukkan jumlah pesanan yang anda inginkan = ");
      if (jumlahInput == null || jumlahInput.trim().isEmpty()) {
          JOptionPane.showMessageDialog(null, "Jumlah pesanan invalid", "ERROR", JOptionPane.ERROR_MESSAGE);
      } else {
          int jumlah = Integer.parseInt(jumlahInput);
          if (jumlah == 0) {
              JOptionPane.showMessageDialog(null, "Jumlah pesanan invalid", "ERROR", JOptionPane.ERROR_MESSAGE);
          } else {
            int harga = 2500;
            int total = jumlah * harga;
            
            int urutanPesanan = modela.getRowCount() + 1;
            modela.addRow(new Object[]{urutanPesanan, "KOCOR", harga, jumlah, total});

            try {
                String sql = "INSERT INTO pencuci_mulut (nama_mulut, harga_mulut, jumlah_mulut, total_harga) VALUES (?, ?, ?, ?)";
                PreparedStatement ps = conn.prepareStatement(sql);
                ps.setString(1, "KOCOR");
                ps.setInt(2, harga);
                ps.setInt(3, jumlah);
                ps.setInt(4, total);
                ps.executeUpdate();
                loadDataCuci();
                loadDataAll();
                ps.close();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, "Database error: " + e.getMessage());
            }
            }
           }
    }
    }//GEN-LAST:event_rbKocorActionPerformed

    private void rbPattActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbPattActionPerformed
    ImageIcon pat = new ImageIcon(getClass().getResource("img/pattola.jpg"));
        
    int opsi1 = JOptionPane.showConfirmDialog(this,"PATTOLA \n Pattola, dibuat dengan tepung ketan yang nantinya dibentuk seperti mi dengan kuah gula merah sebagai pemanis \n isi 5 per porsi  \n HARGA : Rp. 10.000,00 \n Apakah anda ingin memesan makanan ini ","DESKRIPSI",JOptionPane.YES_NO_OPTION, JOptionPane.INFORMATION_MESSAGE, pat);
    if(opsi1 == JOptionPane.YES_OPTION){    
String jumlahInput = JOptionPane.showInputDialog("Masukkan jumlah pesanan yang anda inginkan = ");
      if (jumlahInput == null || jumlahInput.trim().isEmpty()) {
          JOptionPane.showMessageDialog(null, "Jumlah pesanan invalid", "ERROR", JOptionPane.ERROR_MESSAGE);
      } else {
          int jumlah = Integer.parseInt(jumlahInput);
          if (jumlah == 0) {
              JOptionPane.showMessageDialog(null, "Jumlah pesanan invalid", "ERROR", JOptionPane.ERROR_MESSAGE);
          } else {
            int harga = 10000;
            int total = jumlah * harga;
            
            int urutanPesanan = modela.getRowCount() + 1;
            modela.addRow(new Object[]{urutanPesanan, "PATTOLA", harga, jumlah, total});

            try {
                String sql = "INSERT INTO pencuci_mulut (nama_mulut, harga_mulut, jumlah_mulut, total_harga) VALUES (?, ?, ?, ?)";
                PreparedStatement ps = conn.prepareStatement(sql);
                ps.setString(1, "PATTOLA");
                ps.setInt(2, harga);
                ps.setInt(3, jumlah);
                ps.setInt(4, total);
                ps.executeUpdate();
                loadDataCuci();
                loadDataAll();
                ps.close();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, "Database error: " + e.getMessage());
            }
            }
           }
    }
    }//GEN-LAST:event_rbPattActionPerformed

    private void btnPesanfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPesanfActionPerformed
        rbBebekh.setEnabled(true);
        rbAyamh.setEnabled(true);
        rbCumi.setEnabled(true);
        rbBebek.setEnabled(true);
        rbAyam.setEnabled(true);
        rbNasi.setEnabled(true);
    }//GEN-LAST:event_btnPesanfActionPerformed

    private void btnPesanbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPesanbActionPerformed
        rbAir.setEnabled(true);
        rbTeh.setEnabled(true);
        rbJruk.setEnabled(true);
        rbJosua.setEnabled(true);
        rbSogem.setEnabled(true);
        rbCendol.setEnabled(true);
    }//GEN-LAST:event_btnPesanbActionPerformed

    private void btnPesandActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPesandActionPerformed
        rbGetas.setEnabled(true);
        rbHolj.setEnabled(true);
        rbDuren.setEnabled(true);
        rbKlepon.setEnabled(true);
        rbKocor.setEnabled(true);
        rbPatt.setEnabled(true);
    }//GEN-LAST:event_btnPesandActionPerformed

    private void btnUbahfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUbahfActionPerformed
   int selectedRow = tblMam.getSelectedRow();
    if (selectedRow != -1) {
        String namaMakanan = modela.getValueAt(selectedRow, 1).toString();
        int currentQuantity = Integer.parseInt(modela.getValueAt(selectedRow, 3).toString());
        double harga = Double.parseDouble(modela.getValueAt(selectedRow, 2).toString());

        String newQuantityStr = JOptionPane.showInputDialog(this, 
            "Masukkan jumlah baru untuk " + namaMakanan + ":", currentQuantity);
        
        if (newQuantityStr != null && !newQuantityStr.trim().isEmpty()) {
            int newQuantity = Integer.parseInt(newQuantityStr);
            if (newQuantity > 0) {
                modela.setValueAt(newQuantity, selectedRow, 3);
                modela.setValueAt(harga * newQuantity, selectedRow, 4);

                try {
                    String sql = "UPDATE makanan SET jumlah_makanan = ?, total_harga = ? WHERE nama_makanan = ?";
                    PreparedStatement ps = conn.prepareStatement(sql);
                    ps.setInt(1, newQuantity);
                    ps.setDouble(2, harga * newQuantity);
                    ps.setString(3, namaMakanan);
                    ps.executeUpdate();

                    JOptionPane.showMessageDialog(this, "Jumlah pesanan berhasil diubah.");
                    loadDataAll();
                } catch (SQLException e) {
                    e.printStackTrace();
                    JOptionPane.showMessageDialog(this, "Error saat mengupdate jumlah di database.");
                }
            } else {
                JOptionPane.showMessageDialog(this, "Jumlah pesanan invalid", "ERROR", JOptionPane.ERROR_MESSAGE);
            }
        }
    }
    }//GEN-LAST:event_btnUbahfActionPerformed

    private void btnUbahbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUbahbActionPerformed
   int selectedRow = tblMinum.getSelectedRow();
    if (selectedRow != -1) {
        String namaMinuman = modelb.getValueAt(selectedRow, 1).toString();
        int currentQuantity = Integer.parseInt(modelb.getValueAt(selectedRow, 3).toString());
        double harga = Double.parseDouble(modelb.getValueAt(selectedRow, 2).toString());

        String newQuantityStr = JOptionPane.showInputDialog(this, 
            "Masukkan jumlah baru untuk " + namaMinuman + ":", currentQuantity);
        
        if (newQuantityStr != null && !newQuantityStr.trim().isEmpty()) {
            int newQuantity = Integer.parseInt(newQuantityStr);
            if (newQuantity > 0) {
                modelb.setValueAt(newQuantity, selectedRow, 3);
                modelb.setValueAt(harga * newQuantity, selectedRow, 4);

                try {
                    String sql = "UPDATE minuman SET jumlah_minuman = ?, total_harga = ? WHERE nama_minuman = ?";
                    PreparedStatement ps = conn.prepareStatement(sql);
                    ps.setInt(1, newQuantity);
                    ps.setDouble(2, harga * newQuantity);
                    ps.setString(3, namaMinuman);
                    ps.executeUpdate();

                    JOptionPane.showMessageDialog(this, "Jumlah pesanan berhasil diubah.");
                    loadDataAll();
                } catch (SQLException e) {
                    e.printStackTrace();
                    JOptionPane.showMessageDialog(this, "Error saat mengupdate jumlah di database.");
                }
            } else {
                JOptionPane.showMessageDialog(this, "Jumlah pesanan invalid", "ERROR", JOptionPane.ERROR_MESSAGE);
            }
        }
    }
    }//GEN-LAST:event_btnUbahbActionPerformed

    private void btnUbahdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUbahdActionPerformed
   int selectedRow = tblCuci.getSelectedRow();
    if (selectedRow != -1) {
        String namaMinuman = modelc.getValueAt(selectedRow, 1).toString();
        int currentQuantity = Integer.parseInt(modelc.getValueAt(selectedRow, 3).toString());
        double harga = Double.parseDouble(modelc.getValueAt(selectedRow, 2).toString());

        String newQuantityStr = JOptionPane.showInputDialog(this, 
            "Masukkan jumlah baru untuk " + namaMinuman + ":", currentQuantity);
        
        if (newQuantityStr != null && !newQuantityStr.trim().isEmpty()) {
            int newQuantity = Integer.parseInt(newQuantityStr);
            if (newQuantity > 0) {
                modelc.setValueAt(newQuantity, selectedRow, 3);
                modelc.setValueAt(harga * newQuantity, selectedRow, 4);

                try {
                    String sql = "UPDATE pencuci_mulut SET jumlah_mulut = ?, total_harga = ? WHERE nama_mulut = ?";
                    PreparedStatement ps = conn.prepareStatement(sql);
                    ps.setInt(1, newQuantity);
                    ps.setDouble(2, harga * newQuantity);
                    ps.setString(3, namaMinuman);
                    ps.executeUpdate();

                    JOptionPane.showMessageDialog(this, "Jumlah pesanan berhasil diubah.");
                    loadDataAll();
                } catch (SQLException e) {
                    e.printStackTrace();
                    JOptionPane.showMessageDialog(this, "Error saat mengupdate jumlah di database.");
                }
            } else {
                JOptionPane.showMessageDialog(this, "Jumlah pesanan invalid", "ERROR", JOptionPane.ERROR_MESSAGE);
            }
        }
    }
    }//GEN-LAST:event_btnUbahdActionPerformed

    private void btnHapusfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHapusfActionPerformed
    int selectedRow = tblMam .getSelectedRow();
    if (selectedRow != -1) {
        String itemName = tblMam.getValueAt(selectedRow, 1).toString();

        try {
            String sql = "DELETE FROM makanan WHERE nama_makanan = ?";
            PreparedStatement ps = conn.prepareStatement(sql);
            ps.setString(1, itemName);
            ps.executeUpdate();
            conn.prepareStatement("SET @count = 0;").execute();
            conn.prepareStatement("UPDATE makanan SET id = @count := @count + 1;").executeUpdate();
            conn.prepareStatement("ALTER TABLE makanan AUTO_INCREMENT = 1;").execute();
            
            JOptionPane.showMessageDialog(this, "Data deleted successfully");
            
            loadDatamam();
            loadDataAll();
        } catch (SQLException e) {
            System.out.println("Error deleting data: " + e.getMessage());
        }
    } else {
        JOptionPane.showMessageDialog(this, "Please select a row to delete.", "No Row Selected", JOptionPane.WARNING_MESSAGE);
    }
    }//GEN-LAST:event_btnHapusfActionPerformed

    private void btnHapusbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHapusbActionPerformed
    int selectedRow = tblMinum .getSelectedRow();
    if (selectedRow != -1) {
        String itemName = tblMinum.getValueAt(selectedRow, 1).toString();

        try {
            String sql = "DELETE FROM minuman WHERE nama_minuman = ?";
            PreparedStatement ps = conn.prepareStatement(sql);
            ps.setString(1, itemName);
            ps.executeUpdate();
            conn.prepareStatement("SET @count = 0;").execute();
            conn.prepareStatement("UPDATE minuman SET id = @count := @count + 1;").executeUpdate();
            conn.prepareStatement("ALTER TABLE minuman AUTO_INCREMENT = 1;").execute();
            
            JOptionPane.showMessageDialog(this, "Data deleted successfully");
            
            loadDataMinum();
            loadDataAll();
        } catch (SQLException e) {
            System.out.println("Error deleting data: " + e.getMessage());
        }
    } else {
        JOptionPane.showMessageDialog(this, "Please select a row to delete.", "No Row Selected", JOptionPane.WARNING_MESSAGE);
    }
    }//GEN-LAST:event_btnHapusbActionPerformed

    private void btnHapusdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHapusdActionPerformed
    int selectedRow = tblCuci .getSelectedRow();
    if (selectedRow != -1) {
        String itemName = tblCuci.getValueAt(selectedRow, 1).toString();

        try {
            String sql = "DELETE FROM pencuci_mulut WHERE nama_mulut = ?";
            PreparedStatement ps = conn.prepareStatement(sql);
            ps.setString(1, itemName);
            ps.executeUpdate();
            conn.prepareStatement("SET @count = 0;").execute();
            conn.prepareStatement("UPDATE pencuci_mulut SET id = @count := @count + 1;").executeUpdate();
            conn.prepareStatement("ALTER TABLE pencuci_mulut AUTO_INCREMENT = 1;").execute();
            
            JOptionPane.showMessageDialog(this, "Data deleted successfully");
            
            loadDataCuci();
            loadDataAll();
        } catch (SQLException e) {
            System.out.println("Error deleting data: " + e.getMessage());
        }
    } else {
        JOptionPane.showMessageDialog(this, "Please select a row to delete.", "No Row Selected", JOptionPane.WARNING_MESSAGE);
    }
    }//GEN-LAST:event_btnHapusdActionPerformed

    private void tblMamMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblMamMouseClicked
        btnUbahf.setEnabled(true);
        btnHapusf.setEnabled(true);
    }//GEN-LAST:event_tblMamMouseClicked

    private void tblMinumMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblMinumMouseClicked
        btnUbahb.setEnabled(true);
        btnHapusb.setEnabled(true);
    }//GEN-LAST:event_tblMinumMouseClicked

    private void tblCuciMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblCuciMouseClicked
        btnUbahd.setEnabled(true);
        btnHapusd.setEnabled(true);
    }//GEN-LAST:event_tblCuciMouseClicked

    private void btnBayarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBayarActionPerformed
        if(tblData.getRowCount() == 0){
            JOptionPane.showMessageDialog(null,"Anda belum memesan apapun, silahkan pilih didalam menu","Peringatan !!!", JOptionPane.WARNING_MESSAGE);
        }
        
     int confirm = JOptionPane.showConfirmDialog(this, "Anda yakin pesanan anda sudah benar ?", "KONFIRMASI PESANAN21", JOptionPane.YES_NO_OPTION);
    if (confirm == JOptionPane.YES_OPTION) {
        tfByr.setEnabled(true);
        btnByr.setEnabled(true);

        int total = 0;
        for (int i = 0; i < tblData.getRowCount(); i++) {
            total += Integer.parseInt(tblData.getValueAt(i, 4).toString()); 
        }
        tfTotal.setText(String.valueOf(total));
    }
    }//GEN-LAST:event_btnBayarActionPerformed

    private void btnByrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnByrActionPerformed
   try {
        int total = Integer.parseInt(tfTotal.getText());   
        int bayar = Integer.parseInt(tfByr.getText());    
        
        if (bayar < total) {
            JOptionPane.showMessageDialog(this, "Uangmu tidak cukup, bayar sesuai total harga", "UANG KURANG", JOptionPane.ERROR_MESSAGE);
        } else {
            int kembalian = bayar - total;                  
            tfKemb.setText(String.valueOf(kembalian));   
            JOptionPane.showMessageDialog(this, "Pembayaran SUKSESSS");
            btnPrint.setEnabled(true);                
        }
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "Please enter a valid amount!", "Invalid Input", JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_btnByrActionPerformed

    private void tfTotalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfTotalActionPerformed
    int total = 0;

    for (int i = 0; i < modeld.getRowCount(); i++) {
        total += Integer.parseInt(modeld.getValueAt(i, 4).toString()); 
    }

    tfTotal.setText(String.valueOf(total));
    }//GEN-LAST:event_tfTotalActionPerformed

    private void btnPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrintActionPerformed
        displayNota();
        this.jTabbedPane1.setEnabledAt(0, false);  
        this.jTabbedPane1.setEnabledAt(1, false);  
        this.jTabbedPane1.setEnabledAt(2, false);  
        this.jTabbedPane1.setEnabledAt(3, false);  
        this.jTabbedPane1.setEnabledAt(4, true);  
        this.jTabbedPane1.setSelectedIndex(4);
    }//GEN-LAST:event_btnPrintActionPerformed

    private void btnDoneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDoneActionPerformed
   try {
        String sqlDeleteMakanan = "DELETE FROM makanan";
        String sqlDeleteMinuman = "DELETE FROM minuman";
        String sqlDeletePencuciMulut = "DELETE FROM pencuci_mulut";

        // Delete all records and reset the AUTO_INCREMENT for each table
        PreparedStatement psMakanan = conn.prepareStatement(sqlDeleteMakanan);
        psMakanan.executeUpdate();
        conn.prepareStatement("SET @count = 0;").execute();
        conn.prepareStatement("UPDATE makanan SET id = @count := @count + 1;").executeUpdate();
        conn.prepareStatement("ALTER TABLE makanan AUTO_INCREMENT = 1;").execute();

        PreparedStatement psMinuman = conn.prepareStatement(sqlDeleteMinuman);
        psMinuman.executeUpdate();
        conn.prepareStatement("SET @count = 0;").execute();
        conn.prepareStatement("UPDATE minuman SET id = @count := @count + 1;").executeUpdate();
        conn.prepareStatement("ALTER TABLE minuman AUTO_INCREMENT = 1;").execute();

        PreparedStatement psPencuciMulut = conn.prepareStatement(sqlDeletePencuciMulut);
        psPencuciMulut.executeUpdate();
        conn.prepareStatement("SET @count = 0;").execute();
        conn.prepareStatement("UPDATE pencuci_mulut SET id = @count := @count + 1;").executeUpdate();
        conn.prepareStatement("ALTER TABLE pencuci_mulut AUTO_INCREMENT = 1;").execute();

        // Reload all data after deletion
        loadDataAll(); 
        
        // Fetch the most recent row in the 'orang' table
        String sql = "SELECT id, nama_pemesan, no_meja, status, tanggal FROM orang ORDER BY id DESC LIMIT 1";
        PreparedStatement ps = conn.prepareStatement(sql);
        ResultSet rs = ps.executeQuery();

        // Only proceed if there is at least one row in the result set
        if (rs.next()) {
            String status = rs.getString("status");
            int id = rs.getInt("id");

            if ("Bungkus".equals(status)) {
                String deleteSql = "DELETE FROM orang WHERE id = ?";
                PreparedStatement delPs = conn.prepareStatement(deleteSql);
                delPs.setInt(1, id); 
                delPs.executeUpdate();

                conn.prepareStatement("SET @count = 0;").execute();
                conn.prepareStatement("UPDATE orang SET id = @count := @count + 1;").executeUpdate();
                conn.prepareStatement("ALTER TABLE orang AUTO_INCREMENT = 1;").execute();

                delPs.close();
            }
        }

        rs.close();
        ps.close();

        // Show thank you message
        ImageIcon mks = new ImageIcon(getClass().getResource("img/thanks.png"));
        JOptionPane.showMessageDialog(this, "TERIMAKASIH ANDA TELAH MAMPIR KE WAROENK PAK KUMIS", "TERIMAKASIH", JOptionPane.INFORMATION_MESSAGE, mks);
        System.exit(0); 
    } catch (SQLException e) {
        System.out.println("Error clearing data: " + e.getMessage());
        JOptionPane.showMessageDialog(this, "Terjadi kesalahan saat menghapus data.", "Penghapusan Gagal", JOptionPane.ERROR_MESSAGE);
    }

    }//GEN-LAST:event_btnDoneActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CULINARY.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CULINARY.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CULINARY.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CULINARY.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CULINARY().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel Beverages;
    private javax.swing.JPanel ConD;
    private javax.swing.JPanel Conb;
    private javax.swing.JPanel Conc;
    private javax.swing.JPanel Conf;
    private javax.swing.JPanel Confirmation;
    private javax.swing.JPanel Coni;
    private javax.swing.JPanel Dessert;
    private javax.swing.JPanel Food;
    private javax.swing.JPanel Invoice;
    private javax.swing.JLabel Title1;
    private javax.swing.JPanel Titleb;
    private javax.swing.JPanel Titlec;
    private javax.swing.JPanel Titlec1;
    private javax.swing.JPanel Titled;
    private javax.swing.JPanel Titlef;
    private javax.swing.JPanel Titlei;
    private javax.swing.JButton btnBayar;
    private javax.swing.JButton btnByr;
    private javax.swing.JButton btnDone;
    private javax.swing.JButton btnHapusb;
    private javax.swing.JButton btnHapusd;
    private javax.swing.JButton btnHapusf;
    private javax.swing.JButton btnPesanb;
    private javax.swing.JButton btnPesand;
    private javax.swing.JButton btnPesanf;
    private javax.swing.JButton btnPrint;
    private javax.swing.JButton btnUbahb;
    private javax.swing.JButton btnUbahd;
    private javax.swing.JButton btnUbahf;
    private javax.swing.JPanel btnb;
    private javax.swing.JPanel btnd;
    private javax.swing.JPanel btnf;
    private javax.swing.JPanel ctnbtnb;
    private javax.swing.JPanel ctnbtnd;
    private javax.swing.JPanel ctnbtnf;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel lbyr;
    private javax.swing.JLabel lbyr1;
    private javax.swing.JLabel ltotal;
    private javax.swing.JRadioButton rbAir;
    private javax.swing.JRadioButton rbAyam;
    private javax.swing.JRadioButton rbAyamh;
    private javax.swing.JRadioButton rbBebek;
    private javax.swing.JRadioButton rbBebekh;
    private javax.swing.JRadioButton rbCendol;
    private javax.swing.JRadioButton rbCumi;
    private javax.swing.JRadioButton rbDuren;
    private javax.swing.JRadioButton rbGetas;
    private javax.swing.JRadioButton rbHolj;
    private javax.swing.JRadioButton rbJosua;
    private javax.swing.JRadioButton rbJruk;
    private javax.swing.JRadioButton rbKlepon;
    private javax.swing.JRadioButton rbKocor;
    private javax.swing.JRadioButton rbNasi;
    private javax.swing.JRadioButton rbPatt;
    private javax.swing.JRadioButton rbSogem;
    private javax.swing.JRadioButton rbTeh;
    private javax.swing.JTextArea taNota;
    private javax.swing.JTable tblCuci;
    private javax.swing.JTable tblData;
    private javax.swing.JTable tblMam;
    private javax.swing.JTable tblMinum;
    private javax.swing.JTextField tfByr;
    private javax.swing.JTextField tfKemb;
    private javax.swing.JTextField tfTotal;
    private javax.swing.JLabel title1;
    private javax.swing.JLabel titled1;
    private javax.swing.JLabel titled2;
    private javax.swing.JLabel titled3;
    private javax.swing.JLabel titled4;
    // End of variables declaration//GEN-END:variables
}
